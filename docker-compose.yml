version: '3.8'

services:
  nginx:
    image: nginx:alpine
    labels:
      com.docker.compose.service: "nginx"    
    container_name: nginx-proxy
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      frontend:
        condition: service_healthy
    networks:
      - frontend-network
    restart: unless-stopped

  frontend:
    build: .
    labels:
      com.docker.compose.service: "frontend"
    image: frontend_node
    env_file: .env
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:3000/ >/dev/null 2>&1 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 6
      start_period: 20s
    depends_on:
      db:
        condition: service_healthy
    networks:
      - frontend-network
      - backend-network
      - monitor-net   # <--- added so Prometheus can see the container
    restart: unless-stopped

  db:
    image: mysql:8.4
    labels:
      com.docker.compose.service: "mysql-db"    
    container_name: mysql-db
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-p${DB_ROOT_PASSWORD}"]
      timeout: 30s
      retries: 10
    volumes:
      - mysql-data:/var/lib/mysql
      - ./init-scripts:/docker-entrypoint-initdb.d 
    networks:
      - backend-network
      - monitor-net   # <--- added
    restart: unless-stopped

  # ------------ Monitoring Layer -------------

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    privileged: true         # <-- ADD THIS
    ports:
      - "8081:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
      - /sys:/sys:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - monitor-net
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - monitor-net
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - monitor-net
    restart: unless-stopped

networks:
  frontend-network:
  backend-network:
    internal: true
  monitor-net:

volumes:
  mysql-data:
  prometheus-data:
  grafana-data:









# version: '3.8'

# services:
#   nginx:
#     image: nginx:alpine
#     container_name: nginx-proxy
#     ports:
#       - "80:80"
#     volumes:
#       - ./nginx.conf:/etc/nginx/nginx.conf:ro
#     depends_on:
#       frontend:
#         condition: service_healthy
#     networks:
#       - frontend-network
#     restart: unless-stopped

#   frontend:
#     build: .
#     image: frontend_node
#     env_file: .env
#     healthcheck:
#       test: ["CMD-SHELL", "wget -qO- http://localhost:3000/ >/dev/null 2>&1 || exit 1"]
#       interval: 10s
#       timeout: 5s
#       retries: 6
#       start_period: 20s
#     depends_on:
#       db:
#         condition: service_healthy
#     networks:
#       - frontend-network
#       - backend-network
#     restart: unless-stopped

#   db:
#     image: mysql:8.4
#     container_name: mysql-db
#     environment:
#       MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
#       MYSQL_DATABASE: ${DB_NAME}
#       MYSQL_USER: ${DB_USER}
#       MYSQL_PASSWORD: ${DB_PASSWORD}
#     healthcheck:
#       test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-p${DB_ROOT_PASSWORD}"]
#       timeout: 30s
#       retries: 10
#     volumes:
#       - mysql-data:/var/lib/mysql
#       - ./init-scripts:/docker-entrypoint-initdb.d 
#     networks:
#       - backend-network
#     restart: unless-stopped

# networks:
#   frontend-network:
#   backend-network:
#     internal: true

# volumes:
#   mysql-data: